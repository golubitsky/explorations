(.deleteOnExit (java.io.File. "/tmp/form-init13824739954543215608.clj")) (do (set! *warn-on-reflection* nil) (do (try (clojure.core/doto (quote hello-world.core) clojure.core/require clojure.core/in-ns) (catch java.lang.Exception e__9964__auto__ (clojure.core/println e__9964__auto__) (clojure.core/ns hello-world.core))) (clojure.core/when-not (clojure.core/resolve (quote clojure.core/when-some)) (clojure.core/binding [clojure.core/*out* clojure.core/*err*] (clojure.core/println "As of 2.8.2, the repl task is incompatible with" "Clojure versions older than 1.7.0." "\nYou can downgrade to 2.8.1 or use `lein trampoline run" "-m clojure.main` for a simpler fallback repl.")) (java.lang.System/exit 1)) (try (clojure.core/require (quote nrepl.server)) (catch java.lang.Throwable t__9965__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote nrepl.server) ":") (clojure.core/or (.getMessage t__9965__auto__) (clojure.core/type t__9965__auto__))))) (try (clojure.core/require (quote complete.core)) (catch java.lang.Throwable t__9965__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote complete.core) ":") (clojure.core/or (.getMessage t__9965__auto__) (clojure.core/type t__9965__auto__))))) nil) (do (clojure.core/when (try (java.lang.Class/forName "sun.misc.Signal") (catch java.lang.ClassNotFoundException e__9957__auto__)) (try (sun.misc.Signal/handle (sun.misc.Signal. "INT") (clojure.core/proxy [sun.misc.SignalHandler] [] (leiningen.repl/handle [signal__9958__auto__]))) (catch java.lang.Throwable e__9957__auto__))) (do (if nil (clojure.core/require (clojure.core/symbol ""))) (clojure.core/let [server__9960__auto__ (nrepl.server/start-server :bind "127.0.0.1" :port 0 :transport-fn nil :greeting-fn nil :ack-port 39971 :handler (nrepl.server/default-handler (clojure.core/with-local-vars [wrap-init-ns__9919__auto__ (clojure.core/fn [h__9920__auto__] (clojure.core/with-local-vars [init-ns-sentinel__9921__auto__ nil] (clojure.core/fn [{:as msg__9922__auto__, :keys [session]}] (clojure.core/when-not ((clojure.core/deref session) init-ns-sentinel__9921__auto__) (clojure.core/swap! session clojure.core/assoc (var clojure.core/*ns*) (try (clojure.core/require (quote hello-world.core)) (clojure.core/create-ns (quote hello-world.core)) (catch java.lang.Throwable t__9923__auto__ (clojure.core/create-ns (quote user)))) init-ns-sentinel__9921__auto__ true)) (h__9920__auto__ msg__9922__auto__))))] (clojure.core/doto wrap-init-ns__9919__auto__ (nrepl.middleware/set-descriptor! {:expects #{"eval"}, :requires #{(var nrepl.middleware.session/session)}}) (clojure.core/alter-var-root (clojure.core/constantly (clojure.core/deref wrap-init-ns__9919__auto__))))))) port__9961__auto__ (:port server__9960__auto__) repl-port-file__9962__auto__ (clojure.core/apply clojure.java.io/file ["/tmp" ".nrepl-port"]) legacy-repl-port__9963__auto__ (if (.exists (clojure.java.io/file "/tmp/target")) (clojure.java.io/file "/tmp/target" "repl-port"))] (clojure.core/when false (clojure.core/println "nREPL server started on port" port__9961__auto__ "on host" "127.0.0.1" (clojure.core/str "- " (nrepl.transport/uri-scheme #'nrepl.transport/bencode) "://" "127.0.0.1" ":" port__9961__auto__))) (clojure.core/spit (clojure.core/doto repl-port-file__9962__auto__ .deleteOnExit) port__9961__auto__) (clojure.core/when legacy-repl-port__9963__auto__ (clojure.core/spit (clojure.core/doto legacy-repl-port__9963__auto__ .deleteOnExit) port__9961__auto__)) (clojure.core/deref (clojure.core/promise))))))